name: Docker Build and Deploy to VM

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_NAME: azi-backend # Replace with your Docker image name (e.g., my-app)
  CONTAINER_NAME: azi-backend-container # Replace with your desired container name
  DOCKERFILE_PATH: ./Dockerfile # Path to your Dockerfile, adjust if needed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Use a fresh Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to checkout your repository code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # Use a GitHub Secret for your Docker password/token

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the current directory
          push: true # Push the image to the registry
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest # Tag the image with latest

      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@v1.0.0 # Action to execute commands over SSH
        with:
          host: ${{ secrets.VM_HOST }} # IP address or hostname of your VM
          username: ${{ secrets.VM_USERNAME }} # SSH username for your VM
          key: ${{ secrets.SSH_PRIVATE_KEY }} # SSH private key for authentication
          script: |
            # Navigate to a directory if necessary (optional)
            # cd /path/to/your/app

            echo "Pulling the latest Docker image..."
            docker pull ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

            echo "Stopping existing container (if running)..."
            docker stop ${{ env.CONTAINER_NAME }} || true # Stop the container, '|| true' prevents failure if not running

            echo "Removing old container (if exists)..."
            docker rm ${{ env.CONTAINER_NAME }} || true # Remove the container, '|| true' prevents failure if not exists

            echo "Running new container..."
            docker run -d --name ${{ env.CONTAINER_NAME }} -p 80:80 ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest # Run the new container, mapping port 80 (adjust ports as needed)

            echo "Deployment complete!"
