import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Presentation, FileText, Download, Loader2 } from 'lucide-react';

interface Message {
  id: number;
  content: string;
  role: "user" | "assistant";
  timestamp: Date;
  chartData?: any;
}

interface PresentationGeneratorProps {
  messages: Message[];
}

interface Slide {
  title: string;
  content: string;
  chartData?: any;
  type: 'text' | 'chart' | 'summary';
}

export default function PresentationGenerator({ messages }: PresentationGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [slides, setSlides] = useState<Slide[]>([]);
  const [isOpen, setIsOpen] = useState(false);

  const generatePresentation = async () => {
    setIsGenerating(true);
    
    try {
      // Filter meaningful messages (exclude empty or very short ones)
      const meaningfulMessages = messages.filter(msg => 
        msg.content.length > 20 && 
        !msg.content.toLowerCase().includes('hello') &&
        !msg.content.toLowerCase().includes('hi there')
      );

      const generatedSlides: Slide[] = [];

      // Title slide
      generatedSlides.push({
        title: "Data Analysis Presentation",
        content: `Generated from AI Analytics Session\nDate: ${new Date().toLocaleDateString()}\nTotal Insights: ${meaningfulMessages.length}`,
        type: 'summary'
      });

      // Process messages to create slides
      meaningfulMessages.forEach((msg, index) => {
        if (msg.role === 'user') {
          // User question becomes a slide title
          const nextAssistantMsg = meaningfulMessages[index + 1];
          if (nextAssistantMsg && nextAssistantMsg.role === 'assistant') {
            generatedSlides.push({
              title: msg.content.length > 50 ? msg.content.substring(0, 50) + '...' : msg.content,
              content: nextAssistantMsg.content,
              chartData: nextAssistantMsg.chartData,
              type: nextAssistantMsg.chartData ? 'chart' : 'text'
            });
          }
        }
      });

      // Summary slide
      const chartCount = generatedSlides.filter(s => s.type === 'chart').length;
      const textCount = generatedSlides.filter(s => s.type === 'text').length;
      
      generatedSlides.push({
        title: "Session Summary",
        content: `Key Insights:\nâ€¢ ${chartCount} data visualizations created\nâ€¢ ${textCount} analytical responses provided\nâ€¢ Comprehensive data exploration completed\n\nGenerated by AI Analytics Platform`,
        type: 'summary'
      });

      setSlides(generatedSlides);
      setIsOpen(true);
    } catch (error) {
      console.error('Error generating presentation:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const downloadPresentation = () => {
    const htmlContent = generateHTMLPresentation(slides);
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `presentation-${Date.now()}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateHTMLPresentation = (slides: Slide[]) => {
    return `
<!DOCTYPE html>
<html>
<head>
    <title>AI Analytics Presentation</title>
    <style>
        body { font-family: 'Segoe UI', sans-serif; margin: 0; background: #f0f2f5; }
        .slide { width: 90%; max-width: 1000px; margin: 20px auto; padding: 40px; background: white; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); min-height: 500px; }
        .slide h1 { color: #2563eb; border-bottom: 3px solid #2563eb; padding-bottom: 10px; font-size: 2em; }
        .slide h2 { color: #1e40af; margin-top: 30px; }
        .slide p { line-height: 1.6; font-size: 1.1em; white-space: pre-line; }
        .chart-placeholder { background: #f8fafc; border: 2px dashed #e2e8f0; padding: 60px; text-align: center; margin: 20px 0; border-radius: 8px; }
        .slide-number { position: absolute; top: 20px; right: 30px; color: #666; font-size: 0.9em; }
        .summary-slide { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
        .summary-slide h1 { color: white; border-bottom-color: rgba(255,255,255,0.3); }
        @media print { .slide { page-break-after: always; } }
    </style>
</head>
<body>
    ${slides.map((slide, index) => `
        <div class="slide ${slide.type === 'summary' ? 'summary-slide' : ''}">
            <div class="slide-number">${index + 1} / ${slides.length}</div>
            <h1>${slide.title}</h1>
            <p>${slide.content}</p>
            ${slide.chartData ? '<div class="chart-placeholder">ðŸ“Š Chart: ' + (slide.chartData.title || 'Data Visualization') + '</div>' : ''}
        </div>
    `).join('')}
</body>
</html>`;
  };

  if (messages.length === 0) {
    return null;
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button
          onClick={generatePresentation}
          disabled={isGenerating}
          className="flex items-center gap-2 bg-purple-600 hover:bg-purple-700"
        >
          {isGenerating ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : (
            <Presentation className="h-4 w-4" />
          )}
          {isGenerating ? 'Generating...' : 'Create Presentation'}
        </Button>
      </DialogTrigger>
      
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Presentation className="h-5 w-5 text-purple-600" />
            Presentation Preview
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          {slides.map((slide, index) => (
            <div key={index} className={`p-6 border rounded-lg ${slide.type === 'summary' ? 'bg-gradient-to-r from-purple-50 to-blue-50 border-purple-200' : 'bg-white border-gray-200'}`}>
              <div className="flex justify-between items-start mb-3">
                <h3 className="text-lg font-semibold text-gray-800">{slide.title}</h3>
                <span className="text-sm text-gray-500">Slide {index + 1}</span>
              </div>
              <p className="text-gray-700 whitespace-pre-line text-sm leading-relaxed">{slide.content}</p>
              {slide.chartData && (
                <div className="mt-4 p-4 bg-blue-50 border-2 border-dashed border-blue-200 rounded-lg text-center">
                  <FileText className="h-8 w-8 text-blue-500 mx-auto mb-2" />
                  <p className="text-blue-700 font-medium">Chart: {slide.chartData.title || 'Data Visualization'}</p>
                </div>
              )}
            </div>
          ))}
          
          <div className="flex justify-end pt-4 border-t">
            <Button onClick={downloadPresentation} className="flex items-center gap-2">
              <Download className="h-4 w-4" />
              Download Presentation
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}